name: build-linux

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'
        type: string
      commit:
        description: 'Shortform commit hash to build'
        required: true
        default: 'HEAD'
        type: string
  workflow_call:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'
        type: string
      commit:
        description: 'Shortform commit hash to build'
        required: true
        default: 'HEAD'
        type: string
    outputs:
      artifact_name:
        description: 'Name of the artifact to upload'
        value: 'Linux-x86-64'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Checkout specific commit (if provided)
      #   if: ${{ github.event.inputs.commit != 'HEAD' }}
      #   run: |
      #     git fetch --depth=1 origin ${{ github.event.inputs.commit }}
      #     git checkout ${{ github.event.inputs.commit }}

      - name: Set up environment variables
        run: |
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
          echo "CMAKE_C_COMPILER=/usr/bin/clang-19" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER=/usr/bin/clang++-19" >> $GITHUB_ENV
          echo "CMAKE_MAKE_PROGRAM=/usr/bin/ninja" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "VCPKG_ROOT=/usr/local/share/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_INSTALLED_DIR=/usr/local/share/vcpkg/packages" >> $GITHUB_ENV

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
          path: $HOME/vcpkg_cache
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Install basic dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            clang-19 clang-tools-19 lldb-19 lld-19 ninja-build \
            libtool libltdl-dev libc++-dev libc++abi-dev \
            wget unzip zip tar curl pkg-config ca-certificates \
            build-essential
          sudo ln -sf /usr/bin/clang-19 /usr/bin/clang
          sudo ln -sf /usr/bin/clang++-19 /usr/bin/clang++
    
      - name: Install CMake
        run: |
          wget -q https://github.com/Kitware/CMake/releases/download/v3.30.1/cmake-3.30.1-linux-x86_64.tar.gz
          tar -xvf cmake-3.30.1-linux-x86_64.tar.gz
          sudo mv cmake-3.30.1-linux-x86_64 /opt/cmake
          echo "CMAKE_PATH=/opt/cmake/bin" >> $GITHUB_ENV
          echo "PATH=/opt/cmake/bin:$PATH" >> $GITHUB_ENV
      
      - name: Verify CMake installation
        run: |
          cmake --version

      - name: Check clang version
        run: |
          which clang
          which clang++
          clang --version
          clang++ --version

      - name: Install vcpkg dependencies
        run: |
          cd /usr/local/share/vcpkg
          git reset --hard
          git fetch
          git checkout e113942454e6b829366af7bcf196bbdbccbd6b3c
          ./bootstrap-vcpkg.sh -disableMetrics
          cd $GITHUB_WORKSPACE
          mkdir -p $HOME/vcpkg_cache
          export VCPKG_FEATURE_FLAGS=manifests
          /usr/local/share/vcpkg/vcpkg install --recurse

      # For some reason, installing these before vcpkg causes vcpkg to break?
      - name: Install OpenGL dependencies
        run: |
          sudo apt update
          sudo apt install -y libgl1-mesa-dev libx11-dev xorg-dev
      
      - name: Check environment configuration
        run: |
          chmod +x ./scripts/env-check.sh
          ./scripts/env-check.sh            

      - name: Build
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh
      
      - name: Copy files to Release directory
        run: |
          mkdir -p build
          mkdir -p build/Release
          cp -r build/cart_test build/Release/
          cp -r build/ppu_test build/Release/
          cp -r build/rom_test build/Release/
          cp -r build/cpu_test build/Release/
          cp -r build/emu build/Release/
      
      - name: Upload build directory
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x86-64
          path: build/Release
